/**********************************************************************

        --- Qt Architect generated file ---

        File: generalData.cpp
        Last generated: Wed Dec 16 22:43:47 1998

        DO NOT EDIT!!!  This file will be automatically
        regenerated by qtarch.  All changes will be lost.

 *********************************************************************/

#include "generalData.h"
#include "../config.h"

#undef Inherited
#define Inherited QWidget

#include <qlabel.h>
#include <qbuttongroup.h>
#include <qlayout.h>
#include <knuminput.h>

#include <klocale.h>

generalData::generalData
(
        QWidget* parent,
        const char* name
)
        :
        Inherited( parent, name, 0 )
{
        QBoxLayout *lay = new QVBoxLayout (this, 10);

        QButtonGroup* bg = new QButtonGroup( "", this, "ButtonGroup_3" );
        lay->addWidget(bg);

        QGridLayout *gl = new QGridLayout(bg, 1, 1, 10);
        gl->addColSpacing(2, 30);

        CB_AutoCreateWin = new
          QCheckBox( i18n( "Auto Create Windows" ), bg, "CheckBox_1" );
        CB_AutoCreateWin->setAutoRepeat( FALSE );
        CB_AutoCreateWin->setChecked( TRUE );
        gl->addMultiCellWidget(CB_AutoCreateWin, 0, 0, 0, 1);

        CB_BeepNotify = new
          QCheckBox( i18n( "Beep on Notify" ), bg, "CheckBox_3" );
        CB_BeepNotify->setAutoRepeat( FALSE );
        CB_BeepNotify->setChecked( TRUE );
        gl->addWidget(CB_BeepNotify, 0, 3);

        CB_NickCompletion = new
          QCheckBox( i18n( "Nick Completion" ), bg, "CheckBox_4" );
        CB_NickCompletion->setAutoRepeat( FALSE );
        CB_NickCompletion->setChecked( TRUE );
        gl->addMultiCellWidget(CB_NickCompletion, 1, 1, 0, 1);

        CB_ColourPicker = new
          QCheckBox( i18n( "Color Picker Popup" ), bg, "CheckBox_5" );
        CB_ColourPicker->setAutoRepeat( FALSE );
        CB_ColourPicker->setChecked( TRUE );
        gl->addWidget(CB_ColourPicker, 1, 3);

        CB_DisplayTopic = new
          QCheckBox( i18n( "Display Topic in Caption" ), bg, "CheckBox_9" );
        CB_DisplayTopic->setAutoRepeat( FALSE );
        CB_DisplayTopic->setChecked( TRUE );
        gl->addMultiCellWidget(CB_DisplayTopic, 2, 2, 0, 1);

        CB_AutoRejoin = new
          QCheckBox( i18n( "Auto Rejoin" ), bg, "CheckBox_6" );
        CB_AutoRejoin->setAutoRepeat( FALSE );
        CB_AutoRejoin->setChecked( TRUE );
        gl->addWidget(CB_AutoRejoin, 2, 3);

        CB_TimeStamp = new
          QCheckBox( i18n( "Time Stamp" ), bg, "CheckBox_TimeStamp" );
        CB_TimeStamp->setAutoRepeat( FALSE );
        CB_TimeStamp->setChecked( false );
        gl->addMultiCellWidget(CB_TimeStamp, 3, 3, 0, 1);

        CB_MDIMode = new
          QCheckBox( i18n( "Use Tabbed MDI Mode" ), bg, "CheckBox_MDIMode" );
        CB_MDIMode->setAutoRepeat( FALSE );
        CB_MDIMode->setChecked( false );
        gl->addWidget(CB_MDIMode, 3, 3);
        
	KIL_WindowLength = new KIntSpinBox(0, 1000, 1, 0, 10, bg);
        gl->addWidget(KIL_WindowLength, 5, 0);

        QLabel *l = new QLabel( i18n("Window History Length"),
                        bg, "ScrollBackLineLabel" );
        gl->addMultiCellWidget(l, 5, 5, 1, 4);

        gl->addColSpacing(5, 30);

        bg = new QButtonGroup( "", this, "ButtonGroup_4" );
        lay->addWidget(bg);

        gl = new QGridLayout( bg, 1, 1, 10);

        CB_BackgroundPix = new
          QCheckBox( i18n( "Enable Background Pixmap" ), bg, "CheckBox_8" );
        CB_BackgroundPix->setAutoRepeat( FALSE );
        gl->addMultiCellWidget(CB_BackgroundPix, 0, 0, 0, 1);

        SLE_BackgroundFile = new QLineEdit( "", bg, "LineEdit_6" );
        SLE_BackgroundFile->setEchoMode( QLineEdit::Normal );
        SLE_BackgroundFile->setFrame( TRUE );
        gl->addWidget( SLE_BackgroundFile, 1, 0);

        PB_BackgroundBrowse = new
          QPushButton( i18n("Browse"), bg, "PushButton_7" );
        PB_BackgroundBrowse->setAutoRepeat( FALSE );
        gl->addWidget(PB_BackgroundBrowse, 1, 1);

}


generalData::~generalData()
{
}
#include "generalData.moc"
